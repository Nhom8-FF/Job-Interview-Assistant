import streamlit as st
import os
import time
import json
from file_processor import process_file
from gemini_helper import initialize_gemini, generate_response
from prompts import SYSTEM_PROMPT, get_interview_context_prompt

# Page configuration
st.set_page_config(
    page_title="3D Job Interview Assistant",
    page_icon="üëî",
    layout="wide",
    initial_sidebar_state="expanded"
)

# H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ - v·ªõi ti·∫øng Vi·ªát l√† ch·ªß y·∫øu
LANGUAGES = {
    "vi": "Ti·∫øng Vi·ªát",
    "en": "English"
}

# C√°c chu·ªói vƒÉn b·∫£n ƒëa ng√¥n ng·ªØ
TRANSLATIONS = {
    "vi": {
        "app_title": "Tr·ª£ L√Ω Ph·ªèng V·∫•n Xin Vi·ªác",
        "interview_coach": "Hu·∫•n Luy·ªán Vi√™n Ph·ªèng V·∫•n AI",
        "dark_mode": "Ch·∫ø ƒê·ªô T·ªëi",
        "appearance": "Giao Di·ªán",
        "prepare_job": "Chu·∫©n b·ªã cho c√¥ng vi·ªác m∆° ∆∞·ªõc",
        "upload_documents": "T·∫£i L√™n T√†i Li·ªáu",
        "upload_tip": "T·∫£i l√™n CV, m√¥ t·∫£ c√¥ng vi·ªác, ho·∫∑c t√†i li·ªáu li√™n quan ƒë·ªÉ ƒë∆∞·ª£c ph√¢n t√≠ch c√° nh√¢n ho√°",
        "select_file": "Ch·ªçn t·ªáp ƒë·ªÉ t·∫£i l√™n",
        "process_document": "X·ª≠ L√Ω T√†i Li·ªáu",
        "clear_chat": "Xo√° L·ªãch S·ª≠ Chat",
        "features": "T√≠nh NƒÉng",
        "resume_analysis": "Ph√¢n t√≠ch CV",
        "resume_desc": "Nh·∫≠n ph·∫£n h·ªìi v·ªÅ CV c·ªßa b·∫°n",
        "mock_interview": "Luy·ªán t·∫≠p ph·ªèng v·∫•n",
        "mock_desc": "Th·ª±c h√†nh v·ªõi c√¢u h·ªèi th·ª±c t·∫ø",
        "job_analysis": "Ph√¢n t√≠ch m√¥ t·∫£ c√¥ng vi·ªác",
        "job_desc": "Hi·ªÉu r√µ y√™u c·∫ßu ch√≠nh",
        "tips": "L·ªùi khuy√™n ph·ªèng v·∫•n c√° nh√¢n ho√°",
        "tips_desc": "L·ªùi khuy√™n ph√π h·ª£p cho t√¨nh hu·ªëng c·ªßa b·∫°n",
        "assistant_desc": "H∆∞·ªõng d·∫´n AI gi√∫p th√†nh c√¥ng trong ph·ªèng v·∫•n vi·ªác l√†m",
        "chat": "Tr√≤ Chuy·ªán",
        "doc_analysis": "Ph√¢n T√≠ch T√†i Li·ªáu",
        "interview_tips": "L·ªùi Khuy√™n Ph·ªèng V·∫•n",
        "ask_anything": "H·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨ v·ªÅ ph·ªèng v·∫•n vi·ªác l√†m...",
        "doc_loaded": "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!",
        "view_content": "Xem N·ªôi Dung T√†i Li·ªáu",
        "get_insights": "Nh·∫≠n Ph√¢n T√≠ch AI",
        "insights_desc": "Ch·ªçn lo·∫°i ph√¢n t√≠ch v√† t·∫°o th√¥ng tin chi ti·∫øt d·ª±a tr√™n t√†i li·ªáu c·ªßa b·∫°n",
        "select_analysis": "Ch·ªçn lo·∫°i ph√¢n t√≠ch",
        "resume_improvements": "C·∫£i Thi·ªán CV",
        "job_keywords": "T·ª´ Kho√° M√¥ T·∫£ C√¥ng Vi·ªác",
        "skills_gap": "Ph√¢n T√≠ch Kho·∫£ng C√°ch K·ªπ NƒÉng",
        "custom_analysis": "Ph√¢n T√≠ch Tu·ª≥ Ch·ªânh",
        "analyze_document": "Ph√¢n T√≠ch T√†i Li·ªáu",
        "no_document": "Ch∆∞a C√≥ T√†i Li·ªáu N√†o ƒê∆∞·ª£c T·∫£i L√™n",
        "no_doc_text": "T·∫£i l√™n CV, m√¥ t·∫£ c√¥ng vi·ªác, ho·∫∑c t√†i li·ªáu li√™n quan b·∫±ng thanh b√™n ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch v√† th√¥ng tin chi ti·∫øt",
        "upload_tip_2": "Th·ª≠ t·∫£i l√™n c√°c lo·∫°i t√†i li·ªáu kh√°c nhau bao g·ªìm vƒÉn b·∫£n, PDF, DOCX, ho·∫∑c th·∫≠m ch√≠ h√¨nh ·∫£nh",
        "tips_practice": "L·ªùi Khuy√™n & Luy·ªán T·∫≠p Ph·ªèng V·∫•n",
        "tips_desc_2": "Nh·∫≠n h∆∞·ªõng d·∫´n chu·∫©n b·ªã ph·ªèng v·∫•n c√° nh√¢n ho√° cho c√°c lo·∫°i ph·ªèng v·∫•n kh√°c nhau. Ch·ªçn lo·∫°i ph·ªèng v·∫•n b√™n d∆∞·ªõi v√† t√πy ch·ªçn nh·∫≠p vai tr√≤ c√¥ng vi·ªác m·ª•c ti√™u ƒë·ªÉ nh·∫≠n l·ªùi khuy√™n ph√π h·ª£p h∆°n.",
        "select_interview": "Ch·ªçn Lo·∫°i Ph·ªèng V·∫•n",
        "technical": "Ph·ªèng V·∫•n K·ªπ Thu·∫≠t",
        "behavioral": "Ph·ªèng V·∫•n H√†nh Vi",
        "hr_interview": "Ph·ªèng V·∫•n HR",
        "case_interview": "Ph·ªèng V·∫•n T√¨nh Hu·ªëng",
        "job_role": "Nh·∫≠p Vai Tr√≤ C√¥ng Vi·ªác (tu·ª≥ ch·ªçn)",
        "get_tips": "Nh·∫≠n L·ªùi Khuy√™n",
        "practice_questions": "C√¢u H·ªèi Luy·ªán T·∫≠p",
        "practice_tip": "Luy·ªán t·∫≠p v·ªõi c√¢u h·ªèi ph·ªèng v·∫•n th·ª±c t·∫ø cho lo·∫°i ph·ªèng v·∫•n v√† vai tr√≤ c·ª• th·ªÉ c·ªßa b·∫°n.",
        "generate_questions": "T·∫°o C√¢u H·ªèi",
        "footer_tip": "T·∫£i l√™n CV c·ªßa b·∫°n ƒë·ªÉ ƒë∆∞·ª£c chu·∫©n b·ªã ph·ªèng v·∫•n c√° nh√¢n ho√°",
        "powered_by": "Hu·∫•n luy·ªán vi√™n ph·ªèng v·∫•n c√° nh√¢n c·ªßa b·∫°n"
    },
    "en": {
        "app_title": "Job Interview Assistant",
        "interview_coach": "Interview Coach AI",
        "dark_mode": "Dark Mode",
        "appearance": "Appearance",
        "prepare_job": "Prepare for your dream job",
        "upload_documents": "Upload Documents",
        "upload_tip": "Upload your resume, job description, or any relevant document for personalized analysis",
        "select_file": "Select file to upload",
        "process_document": "Process Document",
        "clear_chat": "Clear Chat History",
        "features": "Features",
        "resume_analysis": "Resume analysis",
        "resume_desc": "Get feedback on your resume",
        "mock_interview": "Mock interview preparation",
        "mock_desc": "Practice with realistic questions",
        "job_analysis": "Job description analysis",
        "job_desc": "Understand key requirements",
        "tips": "Personalized interview tips",
        "tips_desc": "Tailored advice for your situation",
        "assistant_desc": "Your personal AI-powered guide to job interview success",
        "chat": "Chat",
        "doc_analysis": "Document Analysis",
        "interview_tips": "Interview Tips",
        "ask_anything": "Ask me anything about job interviews...",
        "doc_loaded": "Document loaded successfully!",
        "view_content": "View Document Content",
        "get_insights": "Get AI-Powered Insights",
        "insights_desc": "Select analysis type and generate personalized insights based on your document",
        "select_analysis": "Select analysis type",
        "resume_improvements": "Resume Improvements",
        "job_keywords": "Job Description Keywords",
        "skills_gap": "Skills Gap Analysis",
        "custom_analysis": "Custom Analysis",
        "analyze_document": "Analyze Document",
        "no_document": "No Document Uploaded Yet",
        "no_doc_text": "Upload a resume, job description, or any relevant document using the sidebar to get personalized analysis and insights",
        "upload_tip_2": "Try uploading different document types including text, PDF, DOCX, or even images",
        "tips_practice": "Interview Tips & Practice",
        "tips_desc_2": "Get personalized interview preparation guidance for different interview types. Select your interview type below and optionally enter your target job role for more tailored advice.",
        "select_interview": "Select Interview Type",
        "technical": "Technical Interview",
        "behavioral": "Behavioral Interview",
        "hr_interview": "HR Interview",
        "case_interview": "Case Interview",
        "job_role": "Enter Job Role (optional)",
        "get_tips": "Get Tips",
        "practice_questions": "Practice Questions",
        "practice_tip": "Practice with real interview questions for your specific role and interview type.",
        "generate_questions": "Generate Questions",
        "footer_tip": "Upload your resume for personalized interview preparation",
        "powered_by": "Your personal interview coach"
    }
}

# Initialize session state variables
if "messages" not in st.session_state:
    st.session_state.messages = []

if "theme" not in st.session_state:
    st.session_state.theme = "light"
    
if "language" not in st.session_state:
    st.session_state.language = "vi"  # Ti·∫øng Vi·ªát l√† m·∫∑c ƒë·ªãnh

if "file_content" not in st.session_state:
    st.session_state.file_content = None

if "gemini_model" not in st.session_state:
    # Initialize Gemini API with provided key
    api_key = os.getenv("GEMINI_API_KEY")
    st.session_state.gemini_model = initialize_gemini(api_key)
    
# H√†m helper ƒë·ªÉ l·∫•y vƒÉn b·∫£n theo ng√¥n ng·ªØ
def get_text(key):
    return TRANSLATIONS[st.session_state.language].get(key, "")

# Apply theme and styling based on selected theme
dark_theme_css = """
<style>
:root {
    --background-color: #1E1E2E;
    --text-color: #CDD6F4;
    --secondary-bg: #313244;
    --primary-color: #6C63FF;
    --accent-color: #FF6584;
    --card-bg: #313244;
    --card-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
}
body {
    background-color: var(--background-color) !important;
    color: var(--text-color) !important;
}
.stApp {
    background-color: var(--background-color) !important;
}
.dark-theme {
    color: var(--text-color);
}
.dark-theme .card {
    background: var(--card-bg) !important;
    box-shadow: var(--card-shadow) !important;
}
.dark-theme .card-title {
    color: #CDD6F4 !important;
}
.dark-theme .card-text {
    color: #a6adc8 !important;
}
.dark-theme .gradient-text {
    background: linear-gradient(90deg, #6C63FF, #FF6584);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
.dark-theme .css-1y4p8pa {
    background-color: #1E1E2E !important;
}
.dark-theme .stTextInput > div > div {
    background-color: #313244 !important;
    color: #CDD6F4 !important;
}
.dark-theme .stButton > button {
    background-color: #313244 !important;
    color: #CDD6F4 !important;
}
.dark-theme .stTextArea > div > div {
    background-color: #313244 !important;
    color: #CDD6F4 !important;
}
.dark-theme .stSelectbox > div > div {
    background-color: #313244 !important;
    color: #CDD6F4 !important;
}
.css-1x8cf1d {
    background-color: var(--background-color) !important;
}
.css-10oheav {
    color: var(--text-color) !important;
}
.css-1aumxhk {
    background-color: var(--background-color) !important;
}
</style>
"""

light_theme_css = """
<style>
:root {
    --background-color: #FFFFFF;
    --text-color: #1E2A3A;
    --secondary-bg: #F4F7FF;
    --primary-color: #6C63FF;
    --accent-color: #FF6584;
    --card-bg: white;
    --card-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}
body {
    background-color: var(--background-color) !important;
    color: var(--text-color) !important;
}
.stApp {
    background-color: var(--background-color) !important;
}
.light-theme {
    color: var(--text-color);
}
.light-theme .card {
    background: var(--card-bg) !important;
    box-shadow: var(--card-shadow) !important;
}
.light-theme .card-title {
    color: #1E2A3A !important;
}
.light-theme .card-text {
    color: #4A5568 !important;
}
.light-theme .gradient-text {
    background: linear-gradient(90deg, #6C63FF, #FF6584);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
</style>
"""

# Apply theme based on user preference
if st.session_state.theme == "dark":
    st.markdown(dark_theme_css, unsafe_allow_html=True)
    theme_class = "dark-theme"
else:
    st.markdown(light_theme_css, unsafe_allow_html=True)
    theme_class = "light-theme"

# Enhanced sidebar with modern styling and translations
with st.sidebar:
    st.markdown(f"""
    <div class="{theme_class}">
        <div style="text-align: center; margin-bottom: 20px;">
            <h1 class="gradient-text" style="font-weight: 800; font-size: 1.8rem;">
                {get_text("interview_coach")}
            </h1>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Language selector
    lang_col1, lang_col2 = st.columns([1, 4])
    with lang_col1:
        st.markdown("üåê")
    with lang_col2:
        selected_language = st.selectbox(
            "Language / Ng√¥n ng·ªØ",
            options=list(LANGUAGES.keys()),
            format_func=lambda x: LANGUAGES[x],
            index=list(LANGUAGES.keys()).index(st.session_state.language)
        )
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.rerun()
    
    # Theme toggle with better styling
    st.markdown(f"""<div class="{theme_class}"><h3 style='margin: 15px 0 10px 0; font-size: 1.2rem;'>{get_text("appearance")}</h3></div>""", unsafe_allow_html=True)
    theme_col1, theme_col2 = st.columns([1, 4])
    with theme_col1:
        st.markdown("üåì")
    with theme_col2:
        theme = st.toggle(get_text("dark_mode"), value=(st.session_state.theme == "dark"), key="theme_toggle")
        if theme != (st.session_state.theme == "dark"):
            st.session_state.theme = "dark" if theme else "light"
            st.rerun()
    
    # Professional image with rounded corners
    st.markdown(f"""
    <div class="{theme_class}">
        <div style="margin: 15px 0; text-align: center;">
            <img src="https://images.unsplash.com/photo-1573497620053-ea5300f94f21" 
                 style="border-radius: 12px; width: 100%; box-shadow: 0 4px 15px rgba(0,0,0,0.1);" 
                 alt="Professional Job Interview">
            <p style="font-size: 0.8rem; margin-top: 8px; opacity: 0.7; text-align: center;">
                {get_text("prepare_job")}
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # File uploader with enhanced styling
    st.markdown(f"""<div class="{theme_class}"><h3 style='margin: 20px 0 10px 0; font-size: 1.2rem;'>{get_text("upload_documents")}</h3></div>""", unsafe_allow_html=True)
    
    # Custom hint box
    st.markdown(f"""
    <div class="{theme_class}">
        <div style="background: rgba(108, 99, 255, 0.1); padding: 10px; border-radius: 8px; margin-bottom: 15px;">
            <p style="font-size: 0.85rem; margin: 0;">
                <strong>üí° Tip:</strong> {get_text("upload_tip")}
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        get_text("select_file"),
        type=["txt", "pdf", "docx", "xlsx", "jpg", "jpeg", "png"]
    )
    
    if uploaded_file and st.button(f"üìÑ {get_text('process_document')}", use_container_width=True):
        with st.spinner("Processing your document..."):
            file_content = process_file(uploaded_file)
            if file_content:
                st.session_state.file_content = file_content
                st.success(get_text("doc_loaded"))
                
                # Add file content to chat context
                file_context_prompt = get_interview_context_prompt(file_content)
                system_message = {"role": "system", "content": file_context_prompt}
                
                # Add system message if it's a new conversation
                if len(st.session_state.messages) == 0:
                    st.session_state.messages.append(system_message)
                # Update system message if conversation already exists
                else:
                    st.session_state.messages[0] = system_message
            else:
                st.error("Failed to process the document. Please try again.")
    
    # Clear chat button with enhanced styling
    if st.button(f"üßπ {get_text('clear_chat')}", use_container_width=True, type="secondary"):
        st.session_state.messages = []
        st.session_state.file_content = None
        st.success("Chat history cleared!")
    
    st.markdown("---")
    
    # Features section with enhanced icons and styling
    st.markdown(f"""<div class="{theme_class}"><h3 style='margin-bottom: 15px; font-size: 1.2rem;'>{get_text("features")}</h3></div>""", unsafe_allow_html=True)
    
    features = [
        ("üìù", get_text("resume_analysis"), get_text("resume_desc")),
        ("üéØ", get_text("mock_interview"), get_text("mock_desc")),
        ("üîç", get_text("job_analysis"), get_text("job_desc")),
        ("üí°", get_text("tips"), get_text("tips_desc"))
    ]
    
    for icon, feature, description in features:
        st.markdown(f"""
        <div class="{theme_class}">
            <div style="margin-bottom: 12px;">
                <div style="font-weight: 500; margin-bottom: 3px;">{icon} {feature}</div>
                <div style="font-size: 0.8rem; opacity: 0.7;">{description}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# Main area with modern 3D design
st.markdown(f"""
<div class="{theme_class}">
    <div style="text-align: center; padding: 20px; margin-bottom: 30px;">
        <h1 class="gradient-text" style="font-size: 3.2rem; font-weight: 800; margin-bottom: 10px;">
            {get_text("app_title")}
        </h1>
        <p style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 20px;">
            {get_text("assistant_desc")}
        </p>
    </div>
</div>
""", unsafe_allow_html=True)

# Modern 3D interface with better images and card styling
st.markdown("""
<style>
    .card {
        border-radius: 15px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        background: white;
        height: 100%;
    }
    .card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 35px rgba(108, 99, 255, 0.2);
    }
    .card-title {
        font-weight: 700;
        font-size: 1.4rem;
        margin-bottom: 15px;
        color: #1E2A3A;
    }
    .card-text {
        color: #4A5568;
        margin-bottom: 15px;
        font-size: 1rem;
    }
</style>
""", unsafe_allow_html=True)

cols = st.columns(3)
with cols[0]:
    st.markdown("""
    <div class="card">
        <img src="https://images.unsplash.com/photo-1620712943543-bcc4688e7485" style="width: 100%; border-radius: 10px; margin-bottom: 15px;" alt="Modern 3D Interface">
        <div class="card-title">Modern 3D Interface</div>
        <div class="card-text">Engaging with a sleek, intuitive design optimized for all devices</div>
    </div>
    """, unsafe_allow_html=True)
    
with cols[1]:
    st.markdown("""
    <div class="card">
        <img src="https://images.unsplash.com/photo-1573496359142-b8d87734a5a2" style="width: 100%; border-radius: 10px; margin-bottom: 15px;" alt="Interview Preparation">
        <div class="card-title">Expert Interview Coaching</div>
        <div class="card-text">Personalized preparation with industry-specific guidance and feedback</div>
    </div>
    """, unsafe_allow_html=True)
    
with cols[2]:
    st.markdown("""
    <div class="card">
        <img src="https://images.unsplash.com/photo-1551288049-bebda4e38f71" style="width: 100%; border-radius: 10px; margin-bottom: 15px;" alt="Document Analysis">
        <div class="card-title">Smart Document Analysis</div>
        <div class="card-text">Advanced AI analysis of your resume and job descriptions for better matching</div>
    </div>
    """, unsafe_allow_html=True)

st.markdown("---")

# Custom tab styling for a modern 3D look
st.markdown("""
<style>
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: #F4F7FF;
        border-radius: 10px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    .stTabs [aria-selected="true"] {
        background-color: #6C63FF !important;
        color: white !important;
        box-shadow: 0 8px 15px rgba(108, 99, 255, 0.3);
        transform: translateY(-2px);
    }
</style>
""", unsafe_allow_html=True)

# Create tabs for different functionalities with icons
tab1, tab2, tab3 = st.tabs([
    f"üí¨ {get_text('chat')}", 
    f"üìä {get_text('doc_analysis')}", 
    f"üéØ {get_text('interview_tips')}"
])

with tab1:
    # Display chat messages from history
    for message in st.session_state.messages:
        if message["role"] != "system":  # Don't show system messages to the user
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
    
    # Accept user input
    if prompt := st.chat_input(get_text("ask_anything")):
        # Add user message to history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Add system prompt if this is the first message
        if len(st.session_state.messages) == 1:
            # Insert system prompt before the user message
            st.session_state.messages.insert(0, {"role": "system", "content": SYSTEM_PROMPT})
        
        # Generate and display assistant response
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            
            with st.spinner("Thinking..."):
                # Add language instruction based on selected language
                messages_copy = st.session_state.messages.copy()
                language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if st.session_state.language == "vi" else "Answer in English."
                
                # Check if first message is system message and update it
                if messages_copy[0]["role"] == "system":
                    messages_copy[0]["content"] += f"\n\n{language_instruction}"
                else:
                    # Insert system message with language instruction at the beginning
                    messages_copy.insert(0, {"role": "system", "content": f"{SYSTEM_PROMPT}\n\n{language_instruction}"})
                
                assistant_response = generate_response(
                    st.session_state.gemini_model, 
                    messages_copy
                )
                
                # Simulate typing
                for chunk in assistant_response.split():
                    full_response += chunk + " "
                    time.sleep(0.02)
                    message_placeholder.markdown(full_response + "‚ñå")
                
                message_placeholder.markdown(full_response)
        
        # Add assistant response to history
        st.session_state.messages.append({"role": "assistant", "content": full_response})

with tab2:
    st.markdown(f"""
    <div class="{theme_class}">
        <h2 class="gradient-text" style="font-weight: 700; font-size: 1.8rem; margin-bottom: 20px;">
            {get_text("doc_analysis")}
        </h2>
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.file_content:
        st.markdown(f"""
        <div class="{theme_class}">
            <div style="background-color: #E8F5E9; padding: 10px 15px; border-radius: 10px; margin-bottom: 20px;">
                <p style="margin: 0; display: flex; align-items: center;">
                    <span style="background-color: #4CAF50; border-radius: 50%; width: 24px; height: 24px; display: inline-flex; justify-content: center; align-items: center; margin-right: 10px; color: white;">‚úì</span>
                    <span style="font-weight: 500;">{get_text("doc_loaded")}</span>
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Display the processed content in a modern card
        with st.expander(f"üìÑ {get_text('view_content')}", expanded=True):
            st.markdown(f"""
            <div class="{theme_class}">
                <div style="background: var(--card-bg); padding: 15px; border-radius: 10px; border-left: 4px solid #6C63FF; max-height: 300px; overflow-y: auto; font-size: 0.9rem; line-height: 1.5;">
                </div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown(f"```\n{st.session_state.file_content}\n```")
        
        # Document analysis section with enhanced UI
        st.markdown(f"""
        <div class="{theme_class}">
            <div style="margin: 25px 0 15px 0;">
                <h3 style="font-weight: 600; font-size: 1.4rem;">
                    üí° {get_text("get_insights")}
                </h3>
                <p style="font-size: 0.9rem; opacity: 0.7; margin-bottom: 15px;">
                    {get_text("insights_desc")}
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Create a card for analysis options
        st.markdown(f"""
        <div class="{theme_class}">
            <div style="background: var(--card-bg); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: var(--card-shadow);">
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        analysis_options = {
            "vi": [
                (get_text("resume_improvements"), "‚úèÔ∏è", "Nh·∫≠n g·ª£i √Ω c·∫£i thi·ªán CV c·ªßa b·∫°n hi·ªáu qu·∫£ h∆°n"),
                (get_text("job_keywords"), "üîç", "Tr√≠ch xu·∫•t c√°c k·ªπ nƒÉng v√† y√™u c·∫ßu ch√≠nh t·ª´ m√¥ t·∫£ c√¥ng vi·ªác"),
                (get_text("skills_gap"), "üìä", "So s√°nh k·ªπ nƒÉng c·ªßa b·∫°n v·ªõi y√™u c·∫ßu c√¥ng vi·ªác"),
                (get_text("custom_analysis"), "üß©", "Ch·ªâ ƒë·ªãnh ti√™u ch√≠ ph√¢n t√≠ch ri√™ng c·ªßa b·∫°n")
            ],
            "en": [
                (get_text("resume_improvements"), "‚úèÔ∏è", "Get suggestions to enhance your resume's impact"),
                (get_text("job_keywords"), "üîç", "Extract key skills and requirements from job postings"),
                (get_text("skills_gap"), "üìä", "Compare your skills with job requirements"),
                (get_text("custom_analysis"), "üß©", "Specify your own analysis criteria")
            ]
        }
        
        analysis_cols = st.columns(4)
        for i, (option, icon, desc) in enumerate(analysis_options[st.session_state.language]):
            with analysis_cols[i]:
                st.markdown(f"""
                <div class="{theme_class}">
                    <div style="text-align: center; cursor: pointer; padding: 10px 5px;">
                        <div style="font-size: 2rem; margin-bottom: 8px;">{icon}</div>
                        <div style="font-weight: 500; font-size: 0.9rem; margin-bottom: 5px;">{option}</div>
                        <div style="font-size: 0.75rem; opacity: 0.7; line-height: 1.2;">{desc}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        analysis_choices = [
            get_text("resume_improvements"), 
            get_text("job_keywords"), 
            get_text("skills_gap"), 
            get_text("custom_analysis")
        ]
        
        analysis_type = st.selectbox(
            get_text("select_analysis"),
            analysis_choices
        )
        
        col1, col2 = st.columns([3, 1])
        with col2:
            generate_analysis = st.button(f"üîç {get_text('analyze_document')}", use_container_width=True)
        
        if generate_analysis:
            # Set language for prompt
            language_prompt = "in Vietnamese" if st.session_state.language == "vi" else "in English"
            analysis_prompt = f"Based on the following document: {st.session_state.file_content}, provide {analysis_type} {language_prompt}. Be detailed and specific."
            
            with st.spinner("Analyzing document..."):
                # Add language-specific system prompt
                language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if st.session_state.language == "vi" else "Answer in English."
                messages = [
                    {"role": "system", "content": f"{SYSTEM_PROMPT}\n\n{language_instruction}"},
                    {"role": "user", "content": analysis_prompt}
                ]
                
                analysis_response = generate_response(st.session_state.gemini_model, messages)
                
                st.markdown(f"""
                <div class="{theme_class}">
                    <div style="background: var(--card-bg); padding: 25px; border-radius: 15px; margin-top: 25px; box-shadow: var(--card-shadow);">
                        <h3 style="color: var(--primary-color); margin-bottom: 20px; font-weight: 700; font-size: 1.3rem;">
                            {get_text("analyze_document")} - {analysis_type}
                        </h3>
                        <div style="line-height: 1.6;">
                """, unsafe_allow_html=True)
                st.markdown(analysis_response)
                st.markdown("</div></div></div>", unsafe_allow_html=True)
    else:
        # Empty state with 3D-style illustration
        st.markdown(f"""
        <div class="{theme_class}">
            <div style="background: var(--card-bg); padding: 30px; border-radius: 15px; text-align: center; margin: 20px 0; box-shadow: var(--card-shadow);">
                <img src="https://images.unsplash.com/photo-1586281380349-632531db7ed4" style="width: 250px; border-radius: 15px; margin-bottom: 20px;" alt="Upload a document">
                <h3 style="margin-bottom: 10px; font-weight: 600;">{get_text("no_document")}</h3>
                <p style="opacity: 0.7; max-width: 450px; margin: 0 auto 15px auto; line-height: 1.5;">
                    {get_text("no_doc_text")}
                </p>
                <div style="background: rgba(108, 99, 255, 0.1); padding: 10px 15px; border-radius: 8px; display: inline-block; margin-top: 10px;">
                    <p style="margin: 0; font-size: 0.85rem; text-align: left;">
                        <strong>üí° Tip:</strong> {get_text("upload_tip_2")}
                    </p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

with tab3:
    st.markdown(f"""
    <div class="{theme_class}">
        <h2 class="gradient-text" style="font-weight: 700; font-size: 1.8rem; margin-bottom: 20px;">
            {get_text("tips_practice")}
        </h2>
        <p style="font-size: 0.95rem; opacity: 0.7; margin-bottom: 20px; max-width: 650px;">
            {get_text("tips_desc_2")}
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    interview_options = {
        "vi": ["Ph·ªèng V·∫•n K·ªπ Thu·∫≠t", "Ph·ªèng V·∫•n H√†nh Vi", "Ph·ªèng V·∫•n HR", "Ph·ªèng V·∫•n T√¨nh Hu·ªëng"],
        "en": ["Technical Interview", "Behavioral Interview", "HR Interview", "Case Interview"]
    }
    
    interview_type = st.selectbox(
        get_text("select_interview"),
        interview_options[st.session_state.language]
    )
    
    job_role = st.text_input(get_text("job_role"))
    
    # Custom button styling for 3D effect
    st.markdown("""
    <style>
        .stButton button {
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            text-transform: none;
        }
        .stButton button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(108, 99, 255, 0.2);
        }
        .primary-btn {
            background-color: #6C63FF !important;
            color: white !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([3, 1])
    with col2:
        get_tips = st.button(f"üí° {get_text('get_tips')}", use_container_width=True)
    
    if get_tips:
        # Set language for prompt
        language_prompt = "in Vietnamese" if st.session_state.language == "vi" else "in English"
        tips_prompt = f"Provide comprehensive tips for a {interview_type} {language_prompt}"
        if job_role:
            tips_prompt += f" for a {job_role} position"
            
        with st.spinner("Generating interview tips..."):
            # Add language-specific system prompt
            language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if st.session_state.language == "vi" else "Answer in English."
            messages = [
                {"role": "system", "content": f"{SYSTEM_PROMPT}\n\n{language_instruction}"},
                {"role": "user", "content": tips_prompt}
            ]
            
            tips_response = generate_response(st.session_state.gemini_model, messages)
            
            st.markdown(f"""
            <div class="{theme_class}">
                <div style="background: var(--card-bg); padding: 20px; border-radius: 15px; margin-top: 20px; box-shadow: var(--card-shadow);">
                    <h3 style="color: var(--primary-color); margin-bottom: 15px; font-weight: 700;">{get_text("get_tips")}</h3>
                    <div style="line-height: 1.6;">
            """, unsafe_allow_html=True)
            st.markdown(tips_response)
            st.markdown("</div></div></div>", unsafe_allow_html=True)
    
    st.markdown(f"""
    <div class="{theme_class}">
        <h3 style='margin: 30px 0 15px 0; font-size: 1.4rem;'>{get_text("practice_questions")}</h3>
        
        <div style="background: rgba(108, 99, 255, 0.05); padding: 10px 15px; border-radius: 8px; margin-bottom: 15px;">
            <p style="margin: 0; font-size: 0.9rem;">
                <strong>üí° Tip:</strong> {get_text("practice_tip")}
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([3, 1])
    with col2:
        get_questions = st.button(f"üéØ {get_text('generate_questions')}", use_container_width=True)
    
    if get_questions:
        # Set language for prompt
        language_prompt = "in Vietnamese" if st.session_state.language == "vi" else "in English"
        questions_prompt = f"Generate 5 common {interview_type} questions {language_prompt}"
        if job_role:
            questions_prompt += f" for a {job_role} position"
            
        with st.spinner("Generating practice questions..."):
            # Add language-specific system prompt
            language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if st.session_state.language == "vi" else "Answer in English."
            messages = [
                {"role": "system", "content": f"{SYSTEM_PROMPT}\n\n{language_instruction}"},
                {"role": "user", "content": questions_prompt}
            ]
            
            questions_response = generate_response(st.session_state.gemini_model, messages)
            
            st.markdown(f"""
            <div class="{theme_class}">
                <div style="background: var(--card-bg); padding: 20px; border-radius: 15px; margin-top: 20px; box-shadow: var(--card-shadow);">
                    <h3 style="color: var(--primary-color); margin-bottom: 15px; font-weight: 700;">{get_text("practice_questions")}</h3>
                    <div style="line-height: 1.6;">
            """, unsafe_allow_html=True)
            st.markdown(questions_response)
            st.markdown("</div></div></div>", unsafe_allow_html=True)

# Enhanced 3D footer
st.markdown("---")
st.markdown(f"""
<div class="{theme_class}">
    <div style="background: var(--card-bg); padding: 20px; border-radius: 15px; margin-top: 30px; box-shadow: var(--card-shadow);">
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
            <div>
                <h3 class="gradient-text" style="margin: 0; font-size: 1.4rem; font-weight: 700;">
                    {get_text("app_title")}
                </h3>
                <p style="margin: 8px 0 0 0; font-size: 0.9rem; opacity: 0.7;">
                    {get_text("powered_by")}
                </p>
            </div>
            <div>
                <div style="background: rgba(108, 99, 255, 0.1); padding: 10px 15px; border-radius: 8px; display: inline-block;">
                    <p style="margin: 0; font-size: 0.85rem;">
                        <strong>üí° Pro Tip:</strong> {get_text("footer_tip")}
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
""", unsafe_allow_html=True)
