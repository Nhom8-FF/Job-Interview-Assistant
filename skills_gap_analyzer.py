import streamlit as st
import re
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from prompts import SYSTEM_PROMPT
from gemini_helper import generate_response

def extract_skills(text):
    """
    Tr√≠ch xu·∫•t danh s√°ch k·ªπ nƒÉng t·ª´ vƒÉn b·∫£n s·ª≠ d·ª•ng c·∫£ x·ª≠ l√Ω regex v√† AI
    """
    # Pattern c∆° b·∫£n ƒë·ªÉ t√¨m k·ªπ nƒÉng
    skill_pattern = r"(?:[\‚Ä¢\-\‚òÖ\‚úì\‚úî]\s*)?([A-Za-z0-9][\w\+\#\.\-\s]*(?:Framework|Language|API|SDK|Library|Technologies|Systems|Software|Development|Programming|Design|Analysis|Management|Marketing|Analytics|Engineering|Security|Architecture|Cloud|DevOps|Testing|UI\/UX|Database|SQL|Python|Java|JavaScript|React|Angular|Vue|Node\.js|PHP|C\+\+|Swift|Go|Rust|TypeScript|AWS|Azure|GCP|Docker|Kubernetes|Linux|Git|Machine Learning|ML|AI|NLP|Deep Learning|Data Science|Scrum|Agile|Kanban|SEO|SEM|Content Marketing|Social Media|Email Marketing|Google Analytics|Photoshop|Illustrator|Sketch|Figma|XD|HTML|CSS|SASS|LESS)(?:\s+\d+(?:\.\d+)?\s+(?:years|yrs))?)"
    
    # T√¨m t·∫•t c·∫£ c√°c k·ªπ nƒÉng s·ª≠ d·ª•ng pattern
    skills_found = re.findall(skill_pattern, text, re.IGNORECASE)
    
    # Lo·∫°i b·ªè duplicates v√† whitespace
    cleaned_skills = list(set([skill.strip() for skill in skills_found if len(skill.strip()) > 2]))
    
    return cleaned_skills

def analyze_skills_gap(resume_text, job_description, gemini_model, language="vi"):
    """
    Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng gi·ªØa s∆° y·∫øu l√Ω l·ªãch v√† m√¥ t·∫£ c√¥ng vi·ªác
    """
    # T·∫°o prompt ph√¢n t√≠ch
    if language == "vi":
        analysis_prompt = f"""
H√£y ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng gi·ªØa CV v√† m√¥ t·∫£ c√¥ng vi·ªác d∆∞·ªõi ƒë√¢y:

CV:
{resume_text}

M√¥ t·∫£ c√¥ng vi·ªác:
{job_description}

Ph√¢n t√≠ch theo c√°c ti√™u ch√≠ sau:
1. C√°c k·ªπ nƒÉng v√† y√™u c·∫ßu ch√≠nh trong m√¥ t·∫£ c√¥ng vi·ªác
2. C√°c k·ªπ nƒÉng v√† kinh nghi·ªám c·ªßa ·ª©ng vi√™n t·ª´ CV
3. K·ªπ nƒÉng tr√πng kh·ªõp (ƒë√°nh gi√° % tr√πng kh·ªõp)
4. K·ªπ nƒÉng thi·∫øu (ƒë√°nh gi√° % thi·∫øu h·ª•t)
5. K·ªπ nƒÉng v∆∞·ª£t tr·ªôi c·ªßa ·ª©ng vi√™n kh√¥ng ƒë∆∞·ª£c nh·∫Øc trong m√¥ t·∫£ c√¥ng vi·ªác (ƒëi·ªÉm m·∫°nh)
6. ƒê√°nh gi√° t·ªïng th·ªÉ v·ªÅ s·ª± ph√π h·ª£p (thang ƒëi·ªÉm 1-10)
7. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán c·ª• th·ªÉ

ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√†nh c√°c ph·∫ßn r√µ r√†ng v·ªõi ti√™u ƒë·ªÅ v√† li·ªát k√™ c·ª• th·ªÉ t·ª´ng k·ªπ nƒÉng.
ƒê·∫£m b·∫£o cung c·∫•p d·ªØ li·ªáu ph·∫ßn trƒÉm v·ªÅ m·ª©c ƒë·ªô ph√π h·ª£p, kho·∫£ng c√°ch k·ªπ nƒÉng, s·ªë ƒëi·ªÉm ƒë√°nh gi√° t·ªïng th·ªÉ ƒë·ªÉ s·ª≠ d·ª•ng cho bi·ªÉu ƒë·ªì.
"""
    else:
        analysis_prompt = f"""
Analyze the skills gap between the resume and job description below:

Resume:
{resume_text}

Job Description:
{job_description}

Analyze according to these criteria:
1. Key skills and requirements in the job description
2. Candidate's skills and experience from the resume
3. Matching skills (evaluate % match)
4. Missing skills (evaluate % gap)
5. Candidate's exceptional skills not mentioned in the job description (strengths)
6. Overall assessment of fit (scale of 1-10)
7. Specific improvement suggestions

Format the results into clear sections with headers and list each skill specifically.
Make sure to provide percentage data about the level of fit, skills gap, and overall assessment score for use in charts.
"""
    
    # T·∫°o h∆∞·ªõng d·∫´n ng√¥n ng·ªØ
    language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if language == "vi" else "Answer in English."
    
    # T·∫°o system prompt
    system_prompt = f"{SYSTEM_PROMPT}\n\nB·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch k·ªπ nƒÉng v√† tuy·ªÉn d·ª•ng v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám.\n\n{language_instruction}"
    
    # T·∫°o tin nh·∫Øn
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": analysis_prompt}
    ]
    
    # G·ªçi Gemini API
    analysis = generate_response(gemini_model, messages)
    
    return analysis

def display_skills_gap_analysis(analysis, language="vi"):
    """
    Hi·ªÉn th·ªã ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng d∆∞·ªõi d·∫°ng tr·ª±c quan
    """
    try:
        # Tr√≠ch xu·∫•t ph·∫ßn trƒÉm t·ª´ n·ªôi dung ph√¢n t√≠ch
        match_pattern = r"(\d+)%\s*(?:tr√πng kh·ªõp|match)"
        gap_pattern = r"(\d+)%\s*(?:thi·∫øu|gap|kh√¥ng ph√π h·ª£p|missing)"
        score_pattern = r"(\d+(?:\.\d+)?)\s*(?:\/|tr√™n)\s*10"
        
        match_percent = re.search(match_pattern, analysis, re.IGNORECASE)
        gap_percent = re.search(gap_pattern, analysis, re.IGNORECASE)
        score = re.search(score_pattern, analysis, re.IGNORECASE)
        
        match_value = int(match_percent.group(1)) if match_percent else 50
        gap_value = int(gap_percent.group(1)) if gap_percent else 50
        score_value = float(score.group(1)) if score else 5.0
        
        # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° 100%
        if match_value + gap_value > 100:
            total = match_value + gap_value
            match_value = int((match_value / total) * 100)
            gap_value = 100 - match_value
        
        # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        labels = ["K·ªπ nƒÉng ph√π h·ª£p", "Kho·∫£ng c√°ch k·ªπ nƒÉng"] if language == "vi" else ["Matching Skills", "Skills Gap"]
        values = [match_value, gap_value]
        colors = ['#4CAF50', '#FF5252']
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n
        fig1 = go.Figure(data=[go.Pie(
            labels=labels,
            values=values,
            hole=.4,
            marker_colors=colors
        )])
        
        fig1.update_layout(
            title_text="Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng" if language == "vi" else "Skills Gap Analysis",
            annotations=[dict(text=f"{match_value}%", x=0.5, y=0.5, font_size=20, showarrow=False)]
        )
        
        st.plotly_chart(fig1)
        
        # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
        fig2 = go.Figure(go.Indicator(
            mode = "gauge+number",
            value = score_value,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "ƒê√°nh gi√° t·ªïng th·ªÉ" if language == "vi" else "Overall Assessment"},
            gauge = {
                'axis': {'range': [0, 10], 'tickwidth': 1, 'tickcolor': "darkblue"},
                'bar': {'color': "darkblue"},
                'bgcolor': "white",
                'borderwidth': 2,
                'bordercolor': "gray",
                'steps': [
                    {'range': [0, 3], 'color': '#FF5252'},
                    {'range': [3, 7], 'color': '#FFC107'},
                    {'range': [7, 10], 'color': '#4CAF50'}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': score_value
                }
            }
        ))
        
        fig2.update_layout(
            margin=dict(l=20, r=20, t=50, b=20),
            height=250,
        )
        
        st.plotly_chart(fig2)
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")
        st.write("Hi·ªÉn th·ªã ph√¢n t√≠ch vƒÉn b·∫£n")
        st.write(analysis)


def skills_gap_analysis_page(gemini_model):
    """
    Trang ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng
    """
    language = st.session_state.language
    
    if language == "vi":
        st.title("Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng")
        st.markdown("T√¨m hi·ªÉu m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa b·∫°n v·ªõi c√¥ng vi·ªác mong mu·ªën v√† c√°ch c·∫£i thi·ªán k·ªπ nƒÉng")
        
        resume_label = "CV c·ªßa b·∫°n"
        job_desc_label = "M√¥ t·∫£ c√¥ng vi·ªác"
        analyze_btn = "Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng"
    else:
        st.title("Skills Gap Analysis")
        st.markdown("Understand your fit for a desired job and how to improve your skills")
        
        resume_label = "Your Resume"
        job_desc_label = "Job Description"
        analyze_btn = "Analyze Skills Gap"
    
    # Nh·∫≠p CV v√† m√¥ t·∫£ c√¥ng vi·ªác
    resume_text = st.text_area(resume_label, height=200)
    job_description = st.text_area(job_desc_label, height=200)
    
    # N√∫t ph√¢n t√≠ch
    if st.button(analyze_btn, type="primary", disabled=(not resume_text or not job_description)):
        if not resume_text or not job_description:
            if language == "vi":
                st.warning("Vui l√≤ng nh·∫≠p c·∫£ CV v√† m√¥ t·∫£ c√¥ng vi·ªác")
            else:
                st.warning("Please enter both resume and job description")
        else:
            with st.spinner("ƒêang ph√¢n t√≠ch..."):
                # Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng
                analysis_result = analyze_skills_gap(resume_text, job_description, gemini_model, language)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch" if language == "vi" else "Analysis Results")
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr·ª±c quan
                display_skills_gap_analysis(analysis_result, language)
                
                # Hi·ªÉn th·ªã ph√¢n t√≠ch chi ti·∫øt
                st.markdown("### Ph√¢n t√≠ch chi ti·∫øt" if language == "vi" else "### Detailed Analysis")
                st.markdown(analysis_result)
                
                # N√∫t t·∫£i xu·ªëng b√°o c√°o
                if language == "vi":
                    st.download_button("üì• T·∫£i xu·ªëng b√°o c√°o", analysis_result, "skills_gap_analysis.txt")
                else:
                    st.download_button("üì• Download Report", analysis_result, "skills_gap_analysis.txt")
    else:
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n khi ch∆∞a ph√¢n t√≠ch
        if language == "vi":
            st.info("D√°n CV c·ªßa b·∫°n v√† m√¥ t·∫£ c√¥ng vi·ªác mong mu·ªën ƒë·ªÉ ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng v√† nh·∫≠n ƒë·ªÅ xu·∫•t c·∫£i thi·ªán")
        else:
            st.info("Paste your resume and desired job description to analyze skills gap and receive improvement suggestions")