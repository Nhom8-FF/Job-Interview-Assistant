import streamlit as st
import time
import random
from prompts import SYSTEM_PROMPT
from gemini_helper import generate_response

def create_interview_system_prompt(interview_type, job_role=None, resume=None, language="vi"):
    """
    T·∫°o system prompt cho m√¥ ph·ªèng ph·ªèng v·∫•n
    """
    if language == "vi":
        interviewer_role = {
            "technical": "ng∆∞·ªùi ph·ªèng v·∫•n k·ªπ thu·∫≠t",
            "behavioral": "ng∆∞·ªùi ph·ªèng v·∫•n h√†nh vi",
            "hr": "ng∆∞·ªùi ph·ªèng v·∫•n t·ª´ b·ªô ph·∫≠n nh√¢n s·ª±",
            "case": "ng∆∞·ªùi ph·ªèng v·∫•n t√¨nh hu·ªëng"
        }
        
        system_prompt = f"""B·∫°n l√† m·ªôt {interviewer_role.get(interview_type, "ng∆∞·ªùi ph·ªèng v·∫•n")} chuy√™n nghi·ªáp v√† c√≥ kinh nghi·ªám.
H√£y ti·∫øn h√†nh m·ªôt bu·ªïi ph·ªèng v·∫•n th·ª±c t·∫ø v√† ch√¢n th·ª±c v·ªõi ·ª©ng vi√™n.

Quy t·∫Øc c·ªßa cu·ªôc ph·ªèng v·∫•n:
1. M·ªói l·∫ßn b·∫°n ch·ªâ h·ªèi m·ªôt c√¢u h·ªèi.
2. L·∫Øng nghe c√¢u tr·∫£ l·ªùi c·ªßa ·ª©ng vi√™n v√† ƒë∆∞a ra ph·∫£n h·ªìi ng·∫Øn g·ªçn.
3. Ph·∫£n h·ªìi n√™n c√≥ t√≠nh x√¢y d·ª±ng v√† chuy√™n nghi·ªáp.
4. Sau khi ƒë√£ h·ªèi √≠t nh·∫•t 5 c√¢u h·ªèi, h√£y h·ªèi ·ª©ng vi√™n c√≥ mu·ªën k·∫øt th√∫c kh√¥ng.
5. N·∫øu ·ª©ng vi√™n mu·ªën k·∫øt th√∫c, h√£y ƒë∆∞a ra ƒë√°nh gi√° t·ªïng th·ªÉ v·ªÅ bu·ªïi ph·ªèng v·∫•n.

H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch gi·ªõi thi·ªáu b·∫£n th√¢n v√† gi·∫£i th√≠ch quy tr√¨nh ph·ªèng v·∫•n.
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
"""
    else:
        interviewer_role = {
            "technical": "technical interviewer",
            "behavioral": "behavioral interviewer",
            "hr": "HR interviewer",
            "case": "case interviewer"
        }
        
        system_prompt = f"""You are an experienced {interviewer_role.get(interview_type, "interviewer")} conducting a professional interview.
Conduct a realistic and authentic interview with the candidate.

Interview rules:
1. Ask only one question at a time.
2. Listen to the candidate's response and provide brief feedback.
3. Feedback should be constructive and professional.
4. After asking at least 5 questions, ask if the candidate wants to end the interview.
5. If the candidate wants to end, provide an overall assessment of the interview.

Start by introducing yourself and explaining the interview process.
Answer in English.
"""

    # Th√™m th√¥ng tin v·ªÅ v·ªã tr√≠ c√¥ng vi·ªác n·∫øu c√≥
    if job_role:
        if language == "vi":
            system_prompt += f"\n\nV·ªã tr√≠ ·ª©ng tuy·ªÉn: {job_role}"
        else:
            system_prompt += f"\n\nJob position: {job_role}"
    
    # Th√™m th√¥ng tin t·ª´ CV n·∫øu c√≥
    if resume:
        if language == "vi":
            system_prompt += f"\n\nTh√¥ng tin t·ª´ CV c·ªßa ·ª©ng vi√™n:\n{resume}"
        else:
            system_prompt += f"\n\nInformation from candidate's resume:\n{resume}"
    
    return system_prompt

def start_interview_session(interview_type, job_role=None, resume=None, gemini_model=None, language="vi"):
    """
    B·∫Øt ƒë·∫ßu phi√™n ph·ªèng v·∫•n
    """
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ tin nh·∫Øn n·∫øu ch∆∞a c√≥
    if "interview_messages" not in st.session_state:
        system_prompt = create_interview_system_prompt(interview_type, job_role, resume, language)
        
        # T·∫°o prompt b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n
        if language == "vi":
            start_prompt = f"T√¥i mu·ªën b·∫Øt ƒë·∫ßu bu·ªïi ph·ªèng v·∫•n {interview_type}"
            if job_role:
                start_prompt += f" cho v·ªã tr√≠ {job_role}"
        else:
            start_prompt = f"I want to start a {interview_type} interview"
            if job_role:
                start_prompt += f" for the {job_role} position"
        
        st.session_state.interview_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": start_prompt}
        ]
        
        # L·∫•y c√¢u tr·∫£ l·ªùi ƒë·∫ßu ti√™n t·ª´ ng∆∞·ªùi ph·ªèng v·∫•n
        with st.spinner("Ng∆∞·ªùi ph·ªèng v·∫•n ƒëang chu·∫©n b·ªã..."):
            interviewer_response = generate_response(gemini_model, st.session_state.interview_messages)
            st.session_state.interview_messages.append({"role": "assistant", "content": interviewer_response})

def interview_simulator_page(gemini_model):
    """
    Trang m√¥ ph·ªèng ph·ªèng v·∫•n
    """
    language = st.session_state.language
    
    if language == "vi":
        st.title("M√¥ ph·ªèng ph·ªèng v·∫•n")
        st.markdown("Luy·ªán t·∫≠p ph·ªèng v·∫•n v·ªõi AI - h√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi nh∆∞ trong m·ªôt cu·ªôc ph·ªèng v·∫•n th·ª±c")
        
        interview_type_label = "Ch·ªçn lo·∫°i ph·ªèng v·∫•n"
        job_role_label = "Nh·∫≠p v·ªã tr√≠ c√¥ng vi·ªác (t√πy ch·ªçn)"
        resume_label = "D√°n CV c·ªßa b·∫°n (t√πy ch·ªçn)"
        start_btn = "B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n m·ªõi"
        your_answer = "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n"
        send_btn = "G·ª≠i c√¢u tr·∫£ l·ªùi"
        reset_btn = "K·∫øt th√∫c v√† b·∫Øt ƒë·∫ßu l·∫°i"
        
        interview_options = {
            "technical": "Ph·ªèng v·∫•n k·ªπ thu·∫≠t",
            "behavioral": "Ph·ªèng v·∫•n h√†nh vi",
            "hr": "Ph·ªèng v·∫•n HR",
            "case": "Ph·ªèng v·∫•n t√¨nh hu·ªëng"
        }
    else:
        st.title("Interview Simulator")
        st.markdown("Practice interviewing with AI - respond to questions as you would in a real interview")
        
        interview_type_label = "Select interview type"
        job_role_label = "Enter job position (optional)"
        resume_label = "Paste your resume (optional)"
        start_btn = "Start new interview"
        your_answer = "Your answer"
        send_btn = "Send response"
        reset_btn = "End and restart"
        
        interview_options = {
            "technical": "Technical Interview",
            "behavioral": "Behavioral Interview",
            "hr": "HR Interview",
            "case": "Case Interview"
        }
    
    # Sidebar cho c√†i ƒë·∫∑t ph·ªèng v·∫•n
    with st.sidebar:
        st.subheader(interview_type_label)
        interview_type = st.selectbox(
            "Type",
            options=list(interview_options.keys()),
            format_func=lambda x: interview_options[x],
            key="interview_type"
        )
        
        job_role = st.text_input(job_role_label, key="interview_job_role")
        resume = st.text_area(resume_label, height=150, key="interview_resume")
        
        if st.button(start_btn, type="primary"):
            # Reset session state
            if "interview_messages" in st.session_state:
                del st.session_state.interview_messages
            
            # B·∫Øt ƒë·∫ßu phi√™n ph·ªèng v·∫•n m·ªõi
            start_interview_session(interview_type, job_role, resume, gemini_model, language)
            st.rerun()
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn
    if "interview_messages" in st.session_state:
        messages = st.session_state.interview_messages
        
        for message in messages:
            if message["role"] == "system":
                continue  # Kh√¥ng hi·ªÉn th·ªã system prompt
                
            if message["role"] == "assistant":
                st.chat_message("assistant", avatar="üë®‚Äçüíº").write(message["content"])
            else:
                st.chat_message("user", avatar="üë§").write(message["content"])
        
        # Th√™m ph·∫ßn nh·∫≠p c√¢u tr·∫£ l·ªùi
        user_response = st.chat_input(your_answer)
        
        if user_response:
            # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng
            st.chat_message("user", avatar="üë§").write(user_response)
            
            # Th√™m v√†o l·ªãch s·ª≠ tin nh·∫Øn
            st.session_state.interview_messages.append({"role": "user", "content": user_response})
            
            # L·∫•y ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi ph·ªèng v·∫•n
            with st.spinner("Ng∆∞·ªùi ph·ªèng v·∫•n ƒëang suy nghƒ©..."):
                interviewer_response = generate_response(gemini_model, st.session_state.interview_messages)
                st.session_state.interview_messages.append({"role": "assistant", "content": interviewer_response})
            
            # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi ph·ªèng v·∫•n
            st.chat_message("assistant", avatar="üë®‚Äçüíº").write(interviewer_response)
    else:
        # H∆∞·ªõng d·∫´n khi ch∆∞a b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n
        if language == "vi":
            st.info("üëà Ch·ªçn lo·∫°i ph·ªèng v·∫•n v√† nh·∫•n 'B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n m·ªõi' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        else:
            st.info("üëà Select an interview type and click 'Start new interview' to begin.")
    
    # N√∫t reset
    if "interview_messages" in st.session_state:
        if st.button(reset_btn):
            del st.session_state.interview_messages
            st.rerun()

def get_feedback_on_interview(messages, gemini_model, language="vi"):
    """
    L·∫•y ph·∫£n h·ªìi chi ti·∫øt v·ªÅ bu·ªïi ph·ªèng v·∫•n
    """
    # Ch·ªâ l·∫•y n·ªôi dung ph·ªèng v·∫•n, b·ªè qua system prompt
    interview_content = "\n\n".join([f"{msg['role'].upper()}: {msg['content']}" for msg in messages[1:]])
    
    if language == "vi":
        feedback_prompt = f"""H√£y ph√¢n t√≠ch bu·ªïi ph·ªèng v·∫•n sau ƒë√¢y v√† ƒë∆∞a ra ph·∫£n h·ªìi chi ti·∫øt:

{interview_content}

Ph·∫£n h·ªìi n√™n bao g·ªìm:
1. ƒêi·ªÉm m·∫°nh trong c√¢u tr·∫£ l·ªùi c·ªßa ·ª©ng vi√™n
2. Lƒ©nh v·ª±c c·∫ßn c·∫£i thi·ªán
3. C√°c c√¢u tr·∫£ l·ªùi c·ª• th·ªÉ m√† ·ª©ng vi√™n tr·∫£ l·ªùi t·ªët v√† l√Ω do
4. ƒê·ªÅ xu·∫•t c√°ch tr·∫£ l·ªùi hi·ªáu qu·∫£ h∆°n cho c√°c c√¢u h·ªèi kh√≥
5. ƒê√°nh gi√° t·ªïng th·ªÉ v√† ch·∫•m ƒëi·ªÉm bu·ªïi ph·ªèng v·∫•n (thang ƒëi·ªÉm 1-10)

ƒê∆∞a ra ph·∫£n h·ªìi ch√¢n th√†nh, chi ti·∫øt v√† h·ªØu √≠ch ƒë·ªÉ gi√∫p ·ª©ng vi√™n c·∫£i thi·ªán k·ªπ nƒÉng ph·ªèng v·∫•n.
"""
    else:
        feedback_prompt = f"""Analyze the following interview and provide detailed feedback:

{interview_content}

Feedback should include:
1. Strengths in the candidate's responses
2. Areas for improvement
3. Specific answers that the candidate handled well and why
4. Suggestions for more effectively answering challenging questions
5. Overall assessment and score for the interview (scale of 1-10)

Provide honest, detailed, and helpful feedback to help the candidate improve their interviewing skills.
"""
    
    # T·∫°o system prompt cho ph·∫£n h·ªìi
    language_instruction = "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát." if language == "vi" else "Answer in English."
    system_prompt = f"{SYSTEM_PROMPT}\n\nB·∫°n l√† m·ªôt chuy√™n gia hu·∫•n luy·ªán ph·ªèng v·∫•n v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám.\n\n{language_instruction}"
    
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": feedback_prompt}
    ]
    
    # G·ªçi API Gemini ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
    feedback = generate_response(gemini_model, messages)
    
    return feedback